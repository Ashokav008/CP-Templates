#include <bits/stdc++.h>
using namespace std;

class TrieNode{
    
    public :
        char data;
        TrieNode * children[26];
        bool isTerminal;
        
        TrieNode(char ch){
            data=ch;
            for(int i=0;i<26;i++){
             children[i]=NULL;
            }
             
            isTerminal=false;
        }
    
};


class Trie{
    
    public:
    TrieNode* root;
    
    Trie(){
        root=new TrieNode('\0');
    }
    
    void insertWordUtil(TrieNode* root, string word){
        
        if(word.size()==0)
            {
                root->isTerminal=true;
                return;
            }
        int index=word[0]-'A';
        TrieNode* child;
        
        
        //present
        if(root->children[index]!=NULL){
            child=root->children[index];
        }else{ //absent
            
            child=new TrieNode(word[0]);
            root->children[index]=child;
            
        }
        insertWordUtil(child, word.substr(1));
        
    }
    
    void insertWord(string word){
        insertWordUtil(root, word);
    }
   bool searchWordUtil(TrieNode* root, string word){
       if(word.size()==0)
        return root->isTerminal;
    
        int index=word[0]-'A';
        TrieNode* child;
        
        //present
        if(root->children[index]!=NULL)
            {
                child=root->children[index];
            }
        else
            return false;
        
        return searchWordUtil(child, word.substr(1));
       
   }
    bool searchWord(string word){
        return searchWordUtil(root, word);
    }
    
};

int main() {
  Trie *t = new Trie();
  t->insertWord("WCE SANGLI");
  t->insertWord("ASHOK");
  t->insertWord("VAVARE");
    t->insertWord("ORACLE");
  cout<<t->searchWord("ORACLE")<<endl;

    return 0;
}